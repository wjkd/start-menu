#!/usr/bin/python3
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QPushButton, QVBoxLayout, QScrollArea, QLineEdit, QLabel
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QThread
from xdg.DesktopEntry import DesktopEntry
import xdg.Menu
import os
from subprocess import Popen
import socket

MENU_DIR = '/etc/xdg/menus/lxde-applications.menu'
HOST = '127.0.0.1'
PORT = 8086
BUFFER_SIZE = 1024

########################################################################
class StartMenu(object):
	
	def __init__(self):
		self.categories = []
		self.applications = []
		menu = xdg.Menu.parse(MENU_DIR)
		for entry in menu.getEntries():
			if isinstance(entry, xdg.Menu.Menu):
				menuEntries = [
					Application(
						menuEntry.DesktopEntry.getName(),
						menuEntry.DesktopEntry.getComment(),
						menuEntry.DesktopEntry.getCategories(),
						menuEntry.DesktopEntry.getKeywords(),
						menuEntry.DesktopEntry.getExec(),
						menuEntry.DesktopEntry.getIcon(),
						self
					) for menuEntry in entry.MenuEntries
				]
				self.applications += menuEntries
				self.categories.append(Category(
					entry.getName(),
					entry.getIcon(),
					menuEntries,
					self
				))
		self.applications.sort(key=lambda application: application.name)
		self.categories.sort(key=lambda category: category.name)
		
		self.server = Server(self)
	
	def exit(self, state):
		if state == Qt.ApplicationInactive:
			#exit()
			self.widget.hide()
	
	def run(self):
		self.app = QApplication(sys.argv)
		self.app.applicationStateChanged.connect(self.exit)
		self.widget = StartMenuWidget(self.categories, self)
		self.server.start()
		sys.exit(self.app.exec_())
		
########################################################################
class StartMenuWidget(QWidget):
	
	def __init__(self, boxes, startMenu):
		super().__init__()
		
		self.boxes = boxes
		self.scrollArea = QScrollArea()
		self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.scrollArea.setWidgetResizable(True)
		self.boxWidget = QWidget()
		self.boxLayout = QVBoxLayout(self.scrollArea)
		for box in self.boxes:
			box.show()
			self.boxLayout.addWidget(box.button)
		self.boxLayout.addStretch()
		self.boxWidget.setLayout(self.boxLayout)
		self.scrollArea.setWidget(self.boxWidget)
		self.scrollArea.show()
		
		self.mainLayout = QVBoxLayout()
		self.mainLayout.addWidget(self.scrollArea)
		
		self.backButton = BackButton()
		self.backButton.hide()
		self.mainLayout.addWidget(self.backButton)
		
		self.searchBar = SearchBar(startMenu)
		self.mainLayout.addWidget(self.searchBar)
		
		self.startMenu = startMenu
		
		geometry = startMenu.app.desktop().screenGeometry()
		width, height = geometry.width(), geometry.height()
		self.move(0,height-515)
		self.setFixedSize(400, 510)
		self.setLayout(self.mainLayout)
		self.setStyleSheet("""
		QScrollArea {
			border: 0 none;
		}
		QWidget {
			background-color:#141a21;
			color: #fff;
		}
		QPushButton {
			padding: 5px;
			text-align: left;
			border: 1px solid transparent;
		}
		QPushButton:hover {
			border:1px solid #fff;
		}
		QLineEdit {
			padding: 5px 10px;
			background-color: #fff;
			color: #000;
		}
		QLabel {
			border-bottom: 1px solid #fff;
			padding-bottom: 3px;
		}
		""")
		self.setWindowFlags(Qt.FramelessWindowHint)
		self.show()
	
	# boxes
	def showBoxes(self, boxes):
		self.boxes = boxes
		self.deleteBoxes()
		for box in boxes:
			box.show()
			self.boxLayout.addWidget(box.button)
		self.boxLayout.addStretch()
	
	def deleteBoxes(self):
		while self.boxLayout.count():
			child = self.boxLayout.takeAt(0)
			if child.widget():
				child.widget().deleteLater()
	
	# page
	def showCategories(self):
		self.showBoxes(self.startMenu.categories)
	
	def showApplications(self):
		self.showBoxes(self.startMenu.entries)
	
	def showSearch(self, query):
		if not query:
			self.showCategories()
			return
		applications = [ entry for entry in self.startMenu.applications if query in entry.name.lower() ]
		categories = [ entry for entry in self.startMenu.categories if query in entry.name.lower() ]
		self.deleteBoxes()
		
		if applications:
			self.boxLayout.addWidget(QLabel('Applications'))
		for application in applications:
			application.show()
			self.boxLayout.addWidget(application.button)
		
		if categories:
			self.boxLayout.addWidget(QLabel('Categories'))
		for category in categories:
			category.show()
			self.boxLayout.addWidget(category.button)
		
		runButton = QPushButton('Execute "%s"' % (query))
		runButton.clicked.connect(lambda x: Popen(query.split(' ')) and exit())
		self.boxLayout.addWidget(runButton)
		
		self.boxLayout.addStretch()
		self.backButton.hide()

########################################################################
class BackButton(QPushButton):
	
	def __init__(self):
		self.icon = QIcon.fromTheme('back')
		super().__init__(self.icon, 'Back')
		self.clicked.connect(self.callback)
	
	def callback(self):
		pass
	
	def set(self, callback):
		self.setCallback(callback)
		self.show()
	
	def setCallback(self, callback):
		self.clicked.disconnect()
		self.callback = callback
		self.clicked.connect(self.callback)

########################################################################
class Application(object):
	
	def __init__(self, name, comment, categories, keywords, execute, icon, startMenu):
		self.name = name
		self.comment = comment
		self.categories = categories
		self.keywords = keywords
		self.execute = execute
		self.iconName = icon
		
		arguments = self.execute.split(' ')
		self.runs = arguments[0]
		self.startMenu = startMenu
		
	def show(self):
		self.icon = QIcon.fromTheme(self.iconName)
		self.button = QPushButton(self.icon, self.name)
		self.button.clicked.connect(self.onButtonClick)
	
	def run(self):
		Popen([ self.runs ])
		self.startMenu.widget.showCategories()
		self.startMenu.widget.hide()
	
	def onButtonClick(self, widget):
		self.run()

########################################################################
class Category(object):
	
	def __init__(self, name, icon, entries, startMenu):
		self.name = name
		self.iconName = icon
		self.entries = entries
		self.startMenu = startMenu
		
	def show(self):
		self.icon = QIcon.fromTheme(self.iconName)
		self.button = QPushButton(self.icon, self.name)
		self.button.clicked.connect(self.onButtonClick)
	
	def onButtonClick(self, widget):
		self.startMenu.widget.showBoxes(self.entries)
		self.startMenu.widget.backButton.set(self.onBackButtonClicked)
	
	def onBackButtonClicked(self, widget):
		self.startMenu.widget.showCategories()
		self.startMenu.widget.backButton.hide()

########################################################################
class SearchBar(QLineEdit):
	
	def __init__(self, startMenu):
		super().__init__()
		self.startMenu = startMenu
		self.setPlaceholderText('Search for programs or categories...')
		self.textChanged.connect(self.onTextChanged)
		self.returnPressed.connect(self.onEnter)
	
	def onTextChanged(self, query):
		self.startMenu.widget.showSearch(query)
	
	def onEnter(self):
		query = self.text()
		try:
			application = next(filter(lambda application: query in application.name.lower(), self.startMenu.applications))
			application.run()
		except StopIteration:
			Popen(query.split(' '))
			self.startMenu.widget.hide()

########################################################################
class Server(QThread):
	
	def __init__(self, startMenu):
		super().__init__()
		self.startMenu = startMenu
	
	def run(self):
		self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.socket.bind((HOST, PORT))
		self.socket.listen(1)
		
		while True:
			self.connection, self.address = self.socket.accept()
			data = self.connection.recv(1024).decode()
			if not data:
				continue
			print('received', data)
			if data == 'show':
				self.startMenu.widget.show()
			elif data == 'hide':
				self.startMenu.widget.hide()
			elif data == 'status':
				self.connection.send(bytes('1' if self.startMenu.widget.isVisible() else '0', 'utf-8'))
				continue
			elif data == 'exit':
				self.socket.close()
				exit()
			self.connection.send(bytes(1))
		

if __name__ == '__main__':
	StartMenu().run()
	
