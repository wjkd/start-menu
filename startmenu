#!/usr/bin/python3
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QPushButton, QHBoxLayout, QVBoxLayout, QGridLayout, QScrollArea, QLineEdit, QLabel
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QThread
from xdg.DesktopEntry import DesktopEntry
import xdg.Menu
import os
from subprocess import Popen
import socket

MENU_DIR = '/etc/xdg/menus/xfce-applications.menu'

HOST = '127.0.0.1'
PORT = 8086
BUFFER_SIZE = 1024

LOGOUT_COMMANDS = {
	'GNOME': 'gnome-session-quit',
	'LXDE': 'lxde-logout',
	'XFCE': 'xfce4-session-logout'
}
SHUTDOWN_COMMAND = ['shutdown', '-h', 'now']

########################################################################
class StartMenu(object):
	
	def __init__(self):
		self.categories = []
		self.applications = []
		menu = xdg.Menu.parse(MENU_DIR)
		for entry in menu.getEntries():
			if isinstance(entry, xdg.Menu.Menu):
				menuEntries = [
					Application(
						menuEntry.DesktopEntry.getName(),
						menuEntry.DesktopEntry.getComment(),
						menuEntry.DesktopEntry.getCategories(),
						menuEntry.DesktopEntry.getKeywords(),
						menuEntry.DesktopEntry.getExec(),
						menuEntry.DesktopEntry.getTerminal(),
						menuEntry.DesktopEntry.getIcon(),
						self
					) for menuEntry in entry.MenuEntries
				]
				self.applications += menuEntries
				self.categories.append(Category(
					entry.getName(),
					entry.getIcon(),
					menuEntries,
					self
				))
		self.applications.sort(key=lambda application: application.name)
		self.categories.sort(key=lambda category: category.name)
		
		self.server = Server(self)
	
	def exit(self, state):
		if state == Qt.ApplicationInactive:
			self.widget.hide()
	
	def run(self):
		self.app = QApplication(sys.argv)
		self.app.applicationStateChanged.connect(self.exit)
		self.widget = StartMenuWidget(self.categories, self)
		self.server.start()
		sys.exit(self.app.exec_())
		
########################################################################
class StartMenuWidget(QWidget):
	
	def __init__(self, boxes, startMenu):
		super().__init__()
		
		self._active = False
		
		QIcon.setThemeName('Arc') # edit this out if your desktop environment is lxde, gnome or kde
		print(QIcon.themeName(), QIcon.themeSearchPaths())
		
		self.leftSide = LeftSide(startMenu)
		self.leftSide.setContentsMargins(0,0,0,0)
		self.leftSideWidget = QWidget()
		self.leftSideWidget.setObjectName('leftSide')
		self.leftSideWidget.setLayout(self.leftSide)
		
		self.rightSide = RightSide(boxes, startMenu)
		self.rightSide.setContentsMargins(0,0,0,0)
		self.rightSideWidget = QWidget()
		self.rightSideWidget.setObjectName('rightSide')
		self.rightSideWidget.setLayout(self.rightSide)
		
		self.mainLayout = QGridLayout()
		self.mainLayout.setContentsMargins(0,0,0,0)
		self.mainLayout.addWidget(self.leftSideWidget, 0, 0)
		self.mainLayout.addWidget(self.rightSideWidget, 0, 1)
		self.mainLayout.setSpacing(0)
		self.startMenu = startMenu
		
		#geometry = startMenu.app.desktop().screenGeometry()
		#width, height = geometry.width(), geometry.height()
		self.move(45,0)
		self.setFixedSize(500, 510)
		self.setLayout(self.mainLayout)
		self.setStyleSheet("""
		#leftSide {
			background-color: #121921;
			width: 36px;
		}
		#leftSide QPushButton {
			margin: 0 2px;
			width: 32px;
			height: 32px;
			icon-size: 32px 32px;
			background-color: #121921;
		}
		
		QScrollArea {
			border: 0 none;
		}
		#rightSide, #rightSide QWidget {
			background-color: #121f28;
			color: #fff;
		}
		#rightSide QBoxLayout {
			margin: 10px;
		}
		#rightSide QLineEdit {
			background-color: #fff;
			border: 1px solid #73c6ff;
			color : #000;
			margin: 10px;
		}
		
		QPushButton {
			padding: 5px;
			text-align: left;
			border: 1px solid transparent;
		}
		#rightSide QPushButton:hover {
			border:1px solid #fff;
		}
		
		QLineEdit {
			padding: 5px 10px;
			background-color: #fff;
			color: #000;
		}
		QLabel {
			border-bottom: 1px solid #fff;
			padding-bottom: 3px;
		}
		""")
		self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
		self.hide()
	
	# boxes
	def showBoxes(self, boxes):
		self.boxes = boxes
		self.deleteBoxes()
		for box in boxes:
			box.show()
			self.boxLayout.addWidget(box.button)
		self.boxLayout.addStretch()
	
	def deleteBoxes(self):
		while self.boxLayout.count():
			child = self.boxLayout.takeAt(0)
			if child.widget():
				child.widget().deleteLater()
	
	# page
	def showCategories(self):
		self.showBoxes(self.startMenu.categories)
		self.startMenu.widget.backButton.hide()
	
	def showApplications(self):
		self.showBoxes(self.startMenu.entries)
	
	def showSearch(self, query):
		if not query:
			self.showCategories()
			return
		applications = [ entry for entry in self.startMenu.applications if query in entry.name.lower() ]
		categories = [ entry for entry in self.startMenu.categories if query in entry.name.lower() ]
		self.deleteBoxes()
		
		if applications:
			self.boxLayout.addWidget(QLabel('Applications'))
		for application in applications:
			application.show()
			self.boxLayout.addWidget(application.button)
		
		if categories:
			self.boxLayout.addWidget(QLabel('Categories'))
		for category in categories:
			category.show()
			self.boxLayout.addWidget(category.button)
		
		runButton = QPushButton('Execute "%s"' % (query))
		runButton.clicked.connect(lambda x: Popen(query.split(' ')) and exit())
		self.boxLayout.addWidget(runButton)
		
		self.boxLayout.addStretch()
		self.backButton.hide()

########################################################################
class LeftSide(QVBoxLayout):
	
	def __init__(self, startMenu):
		super().__init__()
		
		self.addStretch()
		
		logOutIcon = QIcon.fromTheme('system-log-out')
		self.logOut = QPushButton(logOutIcon, '')
		self.logOut.clicked.connect(self.onLogoutClick)
		self.addWidget(self.logOut)
		
		shutdownIcon = QIcon.fromTheme('system-shutdown')
		self.shutdown = QPushButton(shutdownIcon, '')
		self.addWidget(self.shutdown)
		
		self.startMenu = startMenu
	
	def onLogoutClick(self, widget):
		desktop_environment = os.environ['XDG_CURRENT_DESKTOP']
		if desktop_environment in LOGOUT_COMMANDS:
			logout_command = LOGOUT_COMMANDS[desktop_environment]
			Popen([ logout_command ])
	
	def onShutdownClick(self):
		Popen(SHUTDOWN_COMMAND)
		
########################################################################
class RightSide(QVBoxLayout):
	
	def __init__(self, boxes, startMenu):
		super().__init__()
		
		self.boxes = boxes
		self.scrollArea = QScrollArea()
		self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.scrollArea.setWidgetResizable(True)
		self.boxWidget = QWidget()
		self.boxLayout = QVBoxLayout(self.scrollArea)
		for box in self.boxes:
			box.show()
			self.boxLayout.addWidget(box.button)
		self.boxLayout.addStretch()
		self.boxWidget.setLayout(self.boxLayout)
		self.scrollArea.setWidget(self.boxWidget)
		self.scrollArea.show()
		self.addWidget(self.scrollArea)
		
		self.backButton = BackButton()
		self.backButton.hide()
		self.addWidget(self.backButton)
		
		self.searchBar = SearchBar(startMenu)
		self.addWidget(self.searchBar)
		
		self.startMenu = startMenu
	
	# box
	def showBoxes(self, boxes):
		self.boxes = boxes
		self.deleteBoxes()
		for box in boxes:
			box.show()
			self.boxLayout.addWidget(box.button)
		self.boxLayout.addStretch()
	
	def deleteBoxes(self):
		while self.boxLayout.count():
			child = self.boxLayout.takeAt(0)
			if child.widget():
				child.widget().deleteLater()
	
	# page
	def showCategories(self):
		self.showBoxes(self.startMenu.categories)
		self.backButton.hide()
	
	def showApplications(self):
		self.showBoxes(self.startMenu.entries)
	
	def showSearch(self, query):
		if not query:
			self.showCategories()
			return
		applications = [ entry for entry in self.startMenu.applications if entry.searchMatches(query) ]
		categories = [ entry for entry in self.startMenu.categories if query in entry.name.lower() ]
		self.deleteBoxes()
		
		if applications:
			self.boxLayout.addWidget(QLabel('Applications'))
		for application in applications:
			application.show()
			self.boxLayout.addWidget(application.button)
		
		if categories:
			self.boxLayout.addWidget(QLabel('Categories'))
		for category in categories:
			category.show()
			self.boxLayout.addWidget(category.button)
		
		runButton = QPushButton('Execute "%s"' % (query))
		runButton.clicked.connect(lambda x: Popen(query.split(' ')) and self.startMenu.widget.hide())
		self.boxLayout.addWidget(runButton)
		
		self.boxLayout.addStretch()
		self.backButton.hide()

########################################################################
class BackButton(QPushButton):
	
	def __init__(self):
		self.icon = QIcon.fromTheme('back')
		super().__init__(self.icon, 'Back')
		self.clicked.connect(self.callback)
	
	def callback(self):
		pass
	
	def set(self, callback):
		self.setCallback(callback)
		self.show()
	
	def setCallback(self, callback):
		self.clicked.disconnect()
		self.callback = callback
		self.clicked.connect(self.callback)

########################################################################
class Application(object):
	
	def __init__(self, name, comment, categories, keywords, execute, terminal, icon, startMenu):
		self.name = name
		self.comment = comment
		self.categories = categories
		self.keywords = keywords
		self.execute = execute
		self.terminal = terminal
		self.iconName = icon
		
		arguments = self.execute.split(' ')
		self.runs = arguments[0]
		self.startMenu = startMenu
		
	def searchMatches(self, query):
		if query in self.name.lower() or self.runs in query:
			return True
		
		words = query.split(' ')
		for word in query:
			if query in self.keywords or query in self.categories:
				return True
		
		return False
	
	def show(self):
		self.icon = QIcon.fromTheme(self.iconName)
		self.button = QPushButton(self.icon, self.name)
		self.button.clicked.connect(self.onButtonClick)
	
	def run(self):
		if self.terminal:
			Popen([ 'x-terminal-emulator', '-e', self.runs ])
		else:
			Popen([ self.runs ])
		self.startMenu.widget.rightSide.showCategories()
		self.startMenu.widget.hide()
	
	def onButtonClick(self, widget):
		self.run()

########################################################################
class Category(object):
	
	def __init__(self, name, icon, entries, startMenu):
		self.name = name
		self.iconName = icon
		self.entries = entries
		self.startMenu = startMenu
		
	def show(self):
		self.icon = QIcon.fromTheme(self.iconName)
		self.button = QPushButton(self.icon, self.name)
		self.button.clicked.connect(self.onButtonClick)
	
	def onButtonClick(self, widget):
		self.startMenu.widget.rightSide.showBoxes(self.entries)
		self.startMenu.widget.rightSide.backButton.set(self.onBackButtonClicked)
	
	def onBackButtonClicked(self, widget):
		self.startMenu.widget.rightSide.showCategories()

########################################################################
class SearchBar(QLineEdit):
	
	def __init__(self, startMenu):
		super().__init__()
		self.startMenu = startMenu
		self.setPlaceholderText('Search for programs or categories...')
		self.textChanged.connect(self.onTextChanged)
		self.returnPressed.connect(self.onEnter)
	
	def onTextChanged(self, query):
		self.startMenu.widget.rightSide.showSearch(query)
	
	def onEnter(self):
		query = self.text()
		try:
			application = next(filter(lambda application: application.searchMatches(query), self.startMenu.applications))
			application.run()
		except StopIteration:
			Popen(query.split(' '))
			self.startMenu.widget.hide()

########################################################################
class Server(QThread):
	
	def __init__(self, startMenu):
		super().__init__()
		self.startMenu = startMenu
	
	def run(self):
		self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.socket.bind((HOST, PORT))
		self.socket.listen(1)
		
		while True:
			self.connection, self.address = self.socket.accept()
			data = self.connection.recv(1024).decode()
			if not data:
				continue
			print('received', data, self.startMenu.widget._active)
			if data == 'show' or (data == 'toggle' and not self.startMenu.widget._active):
				self.startMenu.widget.show()
				self.startMenu.widget.activateWindow()
				self.startMenu.widget._active = True
			elif data == 'hide' or (data == 'toggle' and self.startMenu.widget._active):
				self.startMenu.widget.hide()
				self.startMenu.widget._active = False
			#elif data == 'toggle':
				#print(self.startMenu.widget.isVisible())
				#self.startMenu.widget.setVisible(not self.startMenu.widget.isVisible())
				#if active: self.startMenu.widget.hide()
				#else: self.startMenu.widget.show()
			elif data == 'status':
				self.connection.send(bytes('1' if self.startMenu.widget.isVisible() else '0', 'utf-8'))
				continue
			elif data == 'exit':
				self.socket.close()
				exit()
			self.connection.send(bytes(1))
		

if __name__ == '__main__':
	StartMenu().run()
	
